
import java.io.*;
import java.util.*;
public class CandidateCode {

	private static void merge(int arr[], int l, int m, int r) {

	    int i, j, k;
	    int n1 = m - l + 1;
	    int n2 =  r - m;
	    int L[] = new int[n1];
	    int R[] = new int[n2];

	    for (i = 0; i < n1; i++)
	        L[i] = arr[l + i];

	    for (j = 0; j < n2; j++)
	        R[j] = arr[m + 1 + j];
	    
	    i = 0;
	    j = 0;
	    k = l;
	    while (i < n1 && j < n2) {
	        if (L[i] <= R[j]) {
	            arr[k] = L[i];
	            i++;
	        } else {
	            arr[k] = R[j];
	            j++;
	        }
	        k++;
	    }
	    
	    while (i < n1) {
	        arr[k] = L[i];
	        i++;
	        k++;
	    }
	    
	    while (j < n2) {
	        arr[k] = R[j];
	        j++;
	        k++;
	    }
	    
	}
	
	private static void mergeSort(int arr[], int l, int r) {
	    
		if (l < r) {
			int m = l + (r - l) / 2;
	        mergeSort(arr, l, m);
	        mergeSort(arr, m+1, r);
	        merge(arr, l, m, r);
	    }
		
	}
	
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int N = sc.nextInt();

		if(N == 1)
			System.out.println(1);
		else {
			int len[] = new int[N];
			int time[] = new int[N];
			int i, j, m, count, a, b, k, X, Y;
			int head[] = new int[N];
			int dummy[] = new int[N];
			int head1[] = new int[N];
			int tail1[] = new int[N];
			int head2[] = new int[N];
			int	tail2[] = new int[N];

			for(i = 0; i < N; i++)
				len[i] = sc.nextInt();

			for(i = 0; i < N; i++)
				time[i] = sc.nextInt();

			for(i = 0; i < N; i++) {
				head[i] = -1 * time[i];
				dummy[i] = time[i];
			}

			mergeSort(dummy, 0, N-1);
			j = 1;
			for(i = 0; i < N - 1; i++) {
				if(dummy[i] != dummy[i + 1])
					j++;
			}

			m = j;
			int dummy1[] = new int[m];
			int dummy2[] = new int[m];
			dummy1[0]=dummy[0];
			j=1;

			for(i = 0; i < N - 1; i++) {
				if(dummy[i] != dummy[i + 1]) {
					dummy1[j] = dummy[i+1];
					j++;
				}
			}

			for(i = 0; i < m; i++) {
				count = 0;
				a = dummy1[i];

				for(k=0;k<N;k++) {
					head1[k] = a + head[k];
					tail1[k]=head1[k]-len[k];
					if((head1[k] >= 0) && (tail1[k] <= 0))
						count++;
				}

				if(count == (N - 1)) {
					System.out.println(count+1);
					System.exit(0);
				}

				if(count == N) {
					System.out.println(count);
					System.exit(0);
				}
			}

			for(i = 0;i < m; i++) {
				a = dummy1[i];
				count=0;

				for(k = 0; k < N; k++) {
					head1[k] = a + head[k];
					tail1[k] = head1[k] - len[k];
					if((head1[k] >= 0) && (tail1[k] <= 0))
						count++;
				}

				dummy2[i] = count;
			}

			X = -1;
			for(i=0;i<m-1;i++) {
				a = dummy1[i];
				count = 0;
				for(k = 0; k < N; k++) {
					head1[k] = a + head[k];
					tail1[k] = head1[k] - len[k];
					if((head1[k] >= 0) && (tail1[k] <= 0)) {
						count++;
						head1[k] = 0;
						tail1[k] = 0;
					}
				}

				Y = count; 
				count = 0;
				for(j = i + 1; j < m; j++) {
					count = 0;
					b = dummy1[j] - a;

					for(k = 0;k < N; k++) {
						if((head1[k] != 0) && (tail1[k] != 0)) {
							head2[k] = b + head1[k];
							tail2[k] = head2[k] - len[k];
							if((head2[k] >= 0) && (tail2[k] <= 0)) {
								count++;
							}
						}
					}

					if((Y + count) > X) {
						X = Y + count;
					}
				}
			}
			System.out.println(X);
		}
		sc.close();
	}
}
